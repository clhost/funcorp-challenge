buildscript {
    apply from: 'version.gradle'

    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://jitpack.io" }
        maven { url "https://dl.bintray.com/whyoleg/ktd" }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${versions.springBoot}")
        classpath("io.spring.gradle:dependency-management-plugin:${versions.springDMP}")
    }
}

allprojects {
    project.version = rootProject.version

    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://jitpack.io" }
        maven { url "https://dl.bintray.com/whyoleg/ktd" }
    }
}

subprojects {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${versions.springBoot}")
            mavenBom("org.springframework.cloud:spring-cloud-dependencies:${versions.springCloud}")
        }

        dependencies {
            dependency("com.vk.api:sdk:${versions.vkApiSdk}")
            dependency("org.apache.logging.log4j:log4j-slf4j-impl:${versions.log4j}")
            dependency("org.apache.logging.log4j:log4j-api:${versions.log4j}")
            dependency("org.apache.logging.log4j:log4j-core:${versions.log4j}")
            dependency("com.google.guava:guava:${versions.guava}")
            dependency("com.github.kilianB:JImageHash:${versions.jImage}")
            dependency("io.minio:minio:${versions.minio}")
            dependency("com.eatthepath:jvptree:${versions.jvptree}")
            dependency("org.apache.commons:commons-imaging:${versions.commonsImage}")
            dependency("com.zaxxer:HikariCP:${versions.hikariCP}")
            dependency("org.liquibase:liquibase-core:${versions.liquibase}")
            /*dependency("org.springframework.metrics:spring-metrics:${versions.metrics}")
            dependency("io.prometheus:simpleclient_common:${versions.metrics}")*/
        }
    }

    task cleanOut {
        delete "${projectDir}/out"
    }
}

configure(subprojects) {
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'idea'
    apply plugin: 'java'

    group = 'com.clhost.memes'

    idea.module {
        name = "${project.parent.name}-${project.name}"
    }

    def commonCompilerArgs =
            ["-parameters", "-Xlint:serial", "-Xlint:cast", "-Xlint:dep-ann",
             "-Xlint:divzero", "-Xlint:empty", "-Xlint:finally", "-Xlint:overrides",
             "-Xlint:path", "-Xlint:-processing", "-Xlint:static", "-Xlint:try", "-Xlint:-options"]

    compileJava.options*.compilerArgs = commonCompilerArgs +
            ["-Xlint:varargs", "-Xlint:fallthrough",
             "-Xlint:deprecation", "-Xlint:unchecked"]

    compileTestJava.options*.compilerArgs = commonCompilerArgs +
            ["-Xlint:-varargs", "-Xlint:-fallthrough", "-Xlint:-rawtypes",
             "-Xlint:-deprecation", "-Xlint:-unchecked"]

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        options.encoding = 'UTF-8'
    }

    compileTestJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        options.encoding = 'UTF-8'
        options.compilerArgs += "-parameters"
    }

    jar.baseName = "${project.parent.name}-${project.name}"

    dependencies {
        implementation('org.springframework.boot:spring-boot-starter-web') {
            exclude module: 'spring-boot-starter-logging'
        }
        implementation('org.springframework.cloud:spring-cloud-starter-openfeign') {
            exclude module: 'spring-boot-starter-logging'
        }
        implementation('org.springframework.cloud:spring-cloud-starter-consul-discovery') {
            exclude module: 'spring-boot-starter-logging'
        }
        implementation('org.springframework.boot:spring-boot-starter-actuator') {
            exclude module: 'spring-boot-starter-logging'
        }
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
            exclude module: 'spring-boot-starter-logging'
        }

        implementation('org.springframework.boot:spring-boot-starter-log4j2')
        implementation('org.projectlombok:lombok')
        annotationProcessor('org.projectlombok:lombok')

        /*implementation('org.springframework.metrics:spring-metrics')
        implementation('io.prometheus:simpleclient_common')*/
        implementation("io.micrometer:micrometer-core:1.3.2")
        implementation("io.micrometer:micrometer-registry-prometheus:1.3.2")
    }
}

configure(project('app')) {
    dependencies {
        implementation("com.vk.api:sdk")

        implementation("org.apache.logging.log4j:log4j-api")
        implementation("org.apache.logging.log4j:log4j-core")
        implementation("org.apache.logging.log4j:log4j-slf4j-impl")

        implementation("com.google.guava:guava")
        implementation("com.github.kilianB:JImageHash")
        implementation("org.apache.commons:commons-imaging")

        implementation('com.zaxxer:HikariCP')
        implementation('org.postgresql:postgresql')
        implementation('org.springframework.data:spring-data-jdbc')
    }

    test {
        useJUnitPlatform()
    }
}

configure(project('tree')) {
    dependencies {
        implementation("com.github.kilianB:JImageHash")
        implementation("org.apache.commons:commons-imaging")

        implementation('com.zaxxer:HikariCP')
        implementation('org.postgresql:postgresql')
        implementation('org.springframework.data:spring-data-jdbc')

        implementation("io.minio:minio")
        implementation("com.eatthepath:jvptree")
        implementation('org.liquibase:liquibase-core')
    }

    test {
        useJUnitPlatform()
    }
}